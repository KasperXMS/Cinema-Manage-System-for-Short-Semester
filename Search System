#ifndef _SEARCHINGSYSTEM_H
#define _SEARCHINGSYSTEM_H


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <io.h>
#include <direct.h>
#include <windows.h>
#include <time.h>
#include <ctype.h>
#include "sortsession.h"
#define MAXSIZE 101
#define MAX_LENGTH_OF_LINE 1024
typedef struct Order{   //订单结构体
    char ID[MAXSIZE];       //用户ID
    char MovName[MAXSIZE];  //影片名
    char Startime[6]; //影片开始时间
    char Stoptime[6]; //影片结束时间
    char CinName[MAXSIZE];  //影院名
    char Sessions[MAXSIZE]; //场次
    int MovieRoom;          //影厅
    int SeatNum;            //座位数
    int seat[3][2];         //座位信息
    int del;                //是否删除订单
    int legal;              //订单是否合法
    struct{                 //下单时间
        int year;
        int month;
        int day;
        int hour;
        int min;
    }date;
    int  cost;               //总花费金额
    int MoneyAccount;       //账户余额
}Order;
typedef struct movie{//场次信息结构体
    char SessioNum[13];     //场次号
    char MovName[MAXSIZE];  //影片名
    char CinName[MAXSIZE];  //影院名
    int MovieRoom;          //影厅
    char Startime[6];           //开始时间
    char Stoptime[6];           //结束时间
    int time;               //总时长
    int AllticketNum;       //总票数
    int remainTicket;       //余票数
    double price;           //票价
    char language[20];      //语言类型
    char MovType[6];        //影片类型
    float discount;         //优惠政策
    int row;                //总排数
    int colum;              //总列数
    int seat[MAXSIZE][MAXSIZE];//座位信息
}SessionDetail;
int time_to_min(char time[]);
void MovSearch(char pathD[]);
void MovAndCinSearch(char pathE[]);
void HotSession(char path[]);
void SetPositionByLine(FILE *fp,int line);
int JudgeSes(char sessions[],char path[]);
Order CreateOrder(char path[],char sessioN[]);
int SearchOrder(char id[]);
SessionDetail ReadSession(char sessionum[],char path[]);
void CurrentSeat(SessionDetail session);
Order SelectSeat(Order order,SessionDetail session);
bool Order_Is_Legal(Order order,SessionDetail session);
bool Time_Is_Conflict(char id[],SessionDetail session);
bool Money_Is_Enough(Order order);
bool Movie_Is_Repeat(char id[],SessionDetail session,char path[]);
Order CompleteOrder(Order order,SessionDetail session);
void ReadOrder(Order order);
void DealOrder(Order order,char path8[]); 		//deal with the order and change information in the files of session
Order Pay(Order order);
void Recover(Order order,char path[]);
int OrderSystem(char path[]);
void SEARCH(char path[]);

Order order;
SessionDetail Detail;
int time_to_min(char time[]){
    char hour[3]={'\0'};
    char min[3]={'\0'};
    int h=0;
    int m=0;
    strncpy(hour,time,2);
    strncpy(min,time+3,2);
    h=atoi(hour);
    m=atoi(min);
    return h*60+m;
}
int SearchOrder(char id[],char path[]){         //查询订单
    char temp[MAXSIZE]={'\0'};
    strcpy(temp,path);
    strcat(temp,"\\order_info\\");
    strcat(temp,id);
    strcat(temp,".txt");

    FILE *fp;
    if((fp = fopen(temp,"r"))==NULL)
        return 0;
    return 1;
}
void MovSearch(char pathD[])
{
	SessionDetail FindFile[200];
	int i=0,j=0,k=0,i1=0,l=0,m=0;
	char movie[MAXSIZE]="\0";
	char path[255]="\0";
	char cc[255]="\0",DATE[255]="\0",DATEE[255]="\0",Ling[255]="\0";
	FILE *fptr=NULL,*fptr1=NULL;
	int Date=0,Date1=0;
	char optionA='\0',optionB='\0';
	time_t I;
	time(&I);
	struct tm* pt;
	pt = localtime(&I);
	Date = pt->tm_mon * 100 + pt->tm_mday;
	itoa(Date,DATEE,4);
	if (pt->tm_mon < 10)
	{
		strcpy(Ling,"0");
		strcat(Ling,DATEE);
	}
	printf("温馨提示：目前输入影片后，默认返还当前日期所有影院所有场次。");
	printf("请输入您想搜索的影片：");
	scanf("%s",movie);
	
	strcpy(path,pathD);
	strcat(path,"\\mov_info\\");
	strcat(path,movie);
	strcat(path,".txt");
						//打开对应的写着影片名的文件，读取所有该影片的场次编号
	if ((fptr = fopen(path,"r")) == NULL)
	{
		printf("打开文件失败！将退出程序！\n");
		exit(1);
	}
	else
	{
		fptr = fopen(path,"r");//打开影片名文件 
		if(fgets(cc,MAXSIZE,fptr) == NULL)
		printf("该影片暂无场次！\n");
		else
		{ 
			for (i = 0;fgets(cc,MAXSIZE,fptr) != NULL;i++)//读取每行的场次编号 
			{
				fscanf(fptr,"%s",FindFile[i].SessioNum);
				fscanf(fptr,"%s",FindFile[i].MovName);
				fscanf(fptr,"%s",FindFile[i].CinName);
				fscanf(fptr,"%d",&FindFile[i].MovieRoom);
				fscanf(fptr,"%s",FindFile[i].Startime);
				fscanf(fptr,"%s",FindFile[i].Stoptime);
				fscanf(fptr,"%d",&FindFile[i].time);
				fscanf(fptr,"%d",&FindFile[i].AllticketNum);
				fscanf(fptr,"%d",&FindFile[i].remainTicket);
				fscanf(fptr,"%lf",&FindFile[i].price);
				fscanf(fptr,"%s",FindFile[i].language);
				fscanf(fptr,"%s",FindFile[i].MovType);
				fscanf(fptr,"%d",&FindFile[i].row);
				fscanf(fptr,"%d",&FindFile[i].colum);
			}
			i1 = i;
			for(i = 0;i < i1;i++)
			{
				for (k = 4;k < 8;i++)
					DATE[k] = FindFile[i].SessioNum[k];//日期信息从场次编号中获取
				Date = atoi(DATE);
				Date1 = pt->tm_mon * 100 + pt->tm_mday; 
				if (Date == Date1) 
				{ 
					printf("%13s%13s\t%2d.%2d%9d\t%6s",FindFile[i].CinName,FindFile[i].MovName,pt->tm_mon,pt->tm_mday,FindFile[i].MovieRoom,FindFile[i].Startime);
					printf("\t%6s%18s%10.2lf%11d\n",FindFile[i].Stoptime,FindFile[i].SessioNum,FindFile[i].price,FindFile[i].remainTicket);
				}
			}
			printf("请根据您的需要从以下选项中选择一项：\n"); 
			printf("1.根据日期过滤结果\n"); 
			printf("2.根据放映场次类型过滤结果（仅当日）\n");
			printf("3.根据放映影厅类型过滤结果（仅当日）\n");
			printf("请输入您的选项：");
			int have=0;
			have = 0;
			scanf("%c",&optionA);
			printf("          影院          影片          日期          影厅          开始时间          结束时间          场次编号          票价          余票数\n");
			if (optionA == '1')
			{
				SessionDetail TEMP0[200];
				printf("请输入您想查询的日期：（温馨提示：直接输入月份+日期 例：9月2日则输入 0902）");
				scanf("%d",Date1); 
				for(i = 0;i < i1;i++)
				{
					for (k = 4;k < 8;k++)
						DATE[k] = FindFile[i].SessioNum[k];//日期信息从场次编号中获取
					Date = atoi(DATE); 
					if (Date == Date1) 
					{ 
						printf("%13s%13s\t%2d.%2d%9d\t%6s",FindFile[i].CinName,FindFile[i].MovName,pt->tm_mon,pt->tm_mday,FindFile[i].MovieRoom,FindFile[i].Startime);
						printf("\t%6s%18s%10.2lf%11d\n",FindFile[i].Stoptime,FindFile[i].SessioNum,FindFile[i].price,FindFile[i].remainTicket);
						have = 1;
						TEMP0[j] = FindFile[i];
						j++;
					}
				}
				if (have == 0)
					printf("该日暂无场次！将退出查询！\n");
				else if (have == 1)
				{
					printf("若您想对场次排序，请从以下选项中选择一项：");
					printf("1.根据放映开始时间排序：\n");
					printf("2.根据场次票价排序：\n"); 
					printf("3.根据场次余票数排序：\n"); 
					printf("请输入您的选项：");
					scanf("%c",&optionB);
					if (optionB == '1')
						TimeSort(path,"\0",DATE,movie,1); 
						else if (optionB == '2')
							PriceSort(path,"\0",Ling,movie,1);
							else if (optionB == '3')
								RemainSort(path,Ling,movie,1);
								else
								{
									printf("非法输入！将退出程序！\n");
									exit(1); 
								} 
				}
			}
				else if (optionA == '2')
				{
					char SESTYPE[4]="\0";
					int have1=0;
					have1 = 0;
					printf("请输入您想观看的场次类型：（温馨提示：中文输入CHN，英文输入ENG）");
					scanf("%s",SESTYPE); 
					if ((strcmp(SESTYPE,"CHN")!= 0) && (strcmp(SESTYPE,"ENG") != 0))
					{
						printf("非法输入!将退出程序！\n");
						exit(1);
					}
					else
					{
						SessionDetail TEMP1[200];
						for (i = 0;i < i1;i++)
						{
							for (k = 4;k < 8;k++)
								DATE[k] = FindFile[i].SessioNum[k];
							Date = atoi(DATE);
							Date1 = pt->tm_mon * 100 + pt->tm_mday;
							if ((strcmp(FindFile[i].MovType,SESTYPE) == 0)&& (Date == Date1))
							{
								printf("%13s%13s\t%2d.%2d%9d\t%6s",FindFile[i].CinName,FindFile[i].MovName,pt->tm_mon,pt->tm_mday,FindFile[i].MovieRoom,FindFile[i].Startime);
								printf("\t%6s%18s%10.2lf%11d\n",FindFile[i].Stoptime,FindFile[i].SessioNum,FindFile[i].price,FindFile[i].remainTicket);
								have1 = 1;
								TEMP1[l] = FindFile[i];
								l++;
							}
						}
						if (have1 == 0)
							printf("无该场次类型电影！将退出查询\n");
							else if (have1 == 1)
							{
								printf("若您想对场次排序，请从以下选项中选择一项：");
								printf("1.根据放映开始时间排序：\n");
								printf("2.根据场次票价排序：\n");
								printf("3.根据场次余票数排序：\n"); 
								printf("请输入您的选项：");
								scanf("%c",&optionB);
								if (optionB == '1')
									TimeSort(path,"\0",Ling,movie,1); 
									else if (optionB == '2')
										PriceSort(path,"\0",Ling,movie,1);
										else if (optionB == '3')
											RemainSort(path,"\0",Ling,movie,1);
											else
											{
												printf("非法输入！将退出程序！\n");
												exit(1); 
											} 
							} 
					}
				}
					else if (optionA == '3')
					{
						char HallType[MAXSIZE]="\0";
						int have2=0;
						SessionDetail TEMP2[200];
						have2 = 0;
						printf("请输入您想观看的场次的影厅类型（温馨提示：一共有2D,3D,4D,IMAX 4种类型）："); 
						scanf("%s",HallType);
						if ((strcmp(HallType,"2D") != 0) && (strcmp(HallType,"3D") != 0) && (strcmp(HallType,"4D") != 0) && (strcmp(HallType,"IMAX") != 0))
						{
							printf("非法输入！将退出系统！\n");
							exit(1);
						}
						else
						{
							for (i = 0;i < i1;i++)
							{
								for (k = 4;k < 8;k++)
									DATE[k] = FindFile[i].SessioNum[k];
								Date = atoi(DATE);
								Date1 = pt->tm_mon * 100 + pt->tm_mday;
								if ((strcmp(FindFile[i].MovType,HallType) == 0) && (Date == Date1))
								{
									printf("%13s%13s\t%2d.%2d%9d\t%6s",FindFile[i].CinName,FindFile[i].MovName,pt->tm_mon,pt->tm_mday,FindFile[i].MovieRoom,FindFile[i].Startime);
									printf("\t%6s%18s%10.2lf%11d\n",FindFile[i].Stoptime,FindFile[i].SessioNum,FindFile[i].price,FindFile[i].remainTicket);
									have2 = 1;
									TEMP2[m] = FindFile[i];
									m++;
								}
							}
								if (have2 == 0)
									printf("目前没有该类型的影厅场次！\n");
								else 
								{
									printf("若您想对场次排序，请从以下选项中选择一项：");
									printf("1.根据放映开始时间排序：\n");
									printf("2.根据场次票价排序：\n");
									printf("3.根据场次余票数排序：\n"); 
									printf("请输入您的选项：");
									scanf("%c",&optionB);
									if (optionB == '1')
										TimeSort(path,"\0",Ling,movie,1); 
										else if (optionB == '2')
											PriceSort(path,"\0",Ling,movie,1);
											else if (optionB == '3')
												RemainSort(path,"\0",Ling,movie,1);
												else
												{
													printf("非法输入！将退出程序！\n");
													exit(1); 
												} 
								}
						} 
					}
						else
						{
							printf("非法输入！将退出程序！\n");
							exit(1);
						}
		}
	}
}
void MovAndCinSearch(char pathE[])
{
	SessionDetail FindFile[200];
	int i=0,j=0,k=0,i1=0,l=0,m=0;
	char movie[MAXSIZE]="\0";
	char cinema[MAXSIZE]="\0";
	char path[255]="\0";
	char cc[255]="\0",DATE[255]="\0",DATEE[255]="\0",Ling[3]="\0";
	FILE *fptr=NULL,*fptr1=NULL;
	int Date=0,Date1=0;
	char optionA='\0',optionB='\0';
	time_t I;
	time(&I);
	struct tm* pt;
	pt = localtime(&I);
	Date = pt->tm_mon * 100 + pt->tm_mday;
	itoa(Date,DATEE,4);
	if (pt->tm_mon < 10)
	{
		strcpy(Ling,"0");
		strcat(Ling,DATEE);
	}
	printf("温馨提示：目前输入影片+影院后，默认返还当前日期所有场次。");
	printf("请输入您想搜索的影片："); 
	scanf("%s",movie);
	printf("\n请输入您想搜索的影院：");
	scanf("%s",cinema);
	
	strcpy(path,pathE);
	strcat(path,"\\mov_info\\");
	strcat(path,movie);
	strcat(path,".txt");
						//打开对应的写着影片名的文件，读取所有该影片的场次编号
	if ((fptr = fopen(path,"r")) == NULL)
	{
		printf("打开文件失败！将退出程序！\n");
		exit(1);
	}
	else
	{
		fptr = fopen(path,"r");//打开影片名文件 
		if(fgets(cc,MAXSIZE,fptr) == NULL)
		printf("该影片暂无场次！\n");
		else
		{ 
			for (i = 0;fgets(cc,MAXSIZE,fptr) != NULL;i++)//读取每行的场次编号 
			{
				fscanf(fptr,"%s",FindFile[i].SessioNum);
				fscanf(fptr,"%s",FindFile[i].MovName);
				fscanf(fptr,"%s",FindFile[i].CinName);
				fscanf(fptr,"%d",&FindFile[i].MovieRoom);
				fscanf(fptr,"%s",FindFile[i].Startime);
				fscanf(fptr,"%s",FindFile[i].Stoptime);
				fscanf(fptr,"%d",&FindFile[i].time);
				fscanf(fptr,"%d",&FindFile[i].AllticketNum);
				fscanf(fptr,"%d",&FindFile[i].remainTicket);
				fscanf(fptr,"%lf",&FindFile[i].price);
				fscanf(fptr,"%s",FindFile[i].language);
				fscanf(fptr,"%s",FindFile[i].MovType);
				fscanf(fptr,"%d",&FindFile[i].row);
				fscanf(fptr,"%d",&FindFile[i].colum);
			}
			i1 = i;
			for(i = 0;i < i1;i++)
			{
				for (k = 4;k < 8;i++)
					DATE[k] = FindFile[i].SessioNum[k];//日期信息从场次编号中获取
				Date = atoi(DATE);
				Date1 = pt->tm_mon * 100 + pt->tm_mday; 
				if ((Date == Date1) && (strcmp(FindFile[i].CinName,cinema) == 0)) 
				{ 
					printf("%13s%13s\t%2d.%2d%9d\t%6s",FindFile[i].CinName,FindFile[i].MovName,pt->tm_mon,pt->tm_mday,FindFile[i].MovieRoom,FindFile[i].Startime);
					printf("\t%6s%18s%10.2lf%11d\n",FindFile[i].Stoptime,FindFile[i].SessioNum,FindFile[i].price,FindFile[i].remainTicket);
				}
			}
			printf("请根据您的需要从以下选项中选择一项：\n"); 
			printf("1.根据日期过滤结果\n"); 
			printf("2.根据放映场次类型过滤结果（仅当日）\n");
			printf("3.根据放映影厅类型过滤结果（仅当日）\n");
			printf("请输入您的选项：");
			int have=0;
			have = 0;
			scanf("%c",&optionA);
			printf("          影院          影片          日期          影厅          开始时间          结束时间          场次编号          票价          余票数\n");
			if (optionA == '1')
			{
				SessionDetail TEMP0[200];
				printf("请输入您想查询的日期：（温馨提示：直接输入月份+日期 例：9月2日则输入 0902）");
				scanf("%d",Date1); 
				for(i = 0;i < i1;i++)
				{
					for (k = 4;k < 8;i++)
						DATE[k] = FindFile[i].SessioNum[k];//日期信息从场次编号中获取
					Date = atoi(DATE); 
					if ((Date == Date1) && (strcmp(FindFile[i].CinName,cinema) == 0)) 
					{ 
						printf("%13s%13s\t%2d.%2d%9d\t%6s",FindFile[i].CinName,FindFile[i].MovName,pt->tm_mon,pt->tm_mday,FindFile[i].MovieRoom,FindFile[i].Startime);
						printf("\t%6s%18s%10.2lf%11d\n",FindFile[i].Stoptime,FindFile[i].SessioNum,FindFile[i].price,FindFile[i].remainTicket);
						have = 1;
						TEMP0[j] = FindFile[i];
						j++;
					}
				}
				if (have == 0)
					printf("该日暂无场次！将退出查询！\n");
				else if (have == 1)
				{
					printf("若您想对场次排序，请从以下选项中选择一项：");
					printf("1.根据放映开始时间排序：\n");
					printf("2.根据场次票价排序：\n");
					printf("3.根据场次余票数排序：\n"); 
					printf("请输入您的选项：");
					scanf("%c",&optionB);
					if (optionB == '1')
						TimeSort(path,cinema,DATE,movie,2); 
						else if (optionB == '2')
							PriceSort(path,cinema,Ling,movie,2);
							else if (optionB == '3')
								RemainSort(path,Ling);
								else
								{
									printf("非法输入！将退出程序！\n");
									exit(1); 
								} 
				}
			}
				else if (optionA == '2')
				{
					char SESTYPE[4]="\0";
					int have1=0;
					have1 = 0;
					printf("请输入您想观看的场次类型：（温馨提示：中文输入CHN，英文输入ENG）");
					scanf("%s",SESTYPE); 
					if ((strcmp(SESTYPE,"CHN")!= 0) && (strcmp(SESTYPE,"ENG") != 0))
					{
						printf("非法输入!将退出程序！\n");
						exit(1);
					}
					else
					{
						SessionDetail TEMP1[200];
						for (i = 0;i < i1;i++)
						{
							for (k = 4;k < 8;k++)
								DATE[k] = FindFile[i].SessioNum[k];
							Date = atoi(DATE);
							Date1 = pt->tm_mon * 100 + pt->tm_mday;
							if ((strcmp(FindFile[i].MovType,SESTYPE) == 0)&& (strcmp(FindFile[i].CinName,cinema) == 0)&&(Date == Date1))
							{
								printf("%13s%13s\t%2d.%2d%9d\t%6s",FindFile[i].CinName,FindFile[i].MovName,pt->tm_mon,pt->tm_mday,FindFile[i].MovieRoom,FindFile[i].Startime);
								printf("\t%6s%18s%10.2lf%11d\n",FindFile[i].Stoptime,FindFile[i].SessioNum,FindFile[i].price,FindFile[i].remainTicket);
								have1 = 1;
								TEMP1[l] = FindFile[i];
								l++;
							}
						}
						if (have1 == 0)
							printf("无该场次类型电影！将退出查询\n");
							else if (have1 == 1)
							{
								printf("若您想对场次排序，请从以下选项中选择一项：");
								printf("1.根据放映开始时间排序：\n");
								printf("2.根据场次票价排序：\n");
								printf("3.根据场次余票数排序：\n"); 
								printf("请输入您的选项：");
								scanf("%c",&optionB);
								if (optionB == '1')
									TimeSort(path,cinema,Ling,movie,2); 
									else if (optionB == '2')
										PriceSort(path,cinema,Ling,movie,2);
										else if (optionB == '3')
											RemainSort(path,cinema,Ling,movie,2);
											else
											{
												printf("非法输入！将退出程序！\n");
												exit(1); 
											} 
							} 
					}
				}
					else if (optionA == '3')
					{
						char HallType[MAXSIZE]="\0";
						int have2=0;
						SessionDetail TEMP2[200];
						have2 = 0;
						printf("请输入您想观看的场次的影厅类型（温馨提示：一共有2D,3D,4D,IMAX 4种类型）："); 
						scanf("%s",HallType);
						if ((strcmp(HallType,"2D") != 0) && (strcmp(HallType,"3D") != 0) && (strcmp(HallType,"4D") != 0) && (strcmp(HallType,"IMAX") != 0))
						{
							printf("非法输入！将退出系统！\n");
							exit(1);
						}
						else
						{
							for (i = 0;i < i1;i++)
							{
								for (k = 4;k < 8;k++)
									DATE[k] = FindFile[i].SessioNum[k];
								Date = atoi(DATE);
								Date1 = pt->tm_mon * 100 + pt->tm_mday;
								if ((strcmp(FindFile[i].MovType,HallType) == 0)&& (strcmp(FindFile[i].CinName,cinema) == 0)&&(Date == Date1))
								{
									printf("%13s%13s\t%2d.%2d%9d\t%6s",FindFile[i].CinName,FindFile[i].MovName,pt->tm_mon,pt->tm_mday,FindFile[i].MovieRoom,FindFile[i].Startime);
									printf("\t%6s%18s%10.2lf%11d\n",FindFile[i].Stoptime,FindFile[i].SessioNum,FindFile[i].price,FindFile[i].remainTicket);
									have2 = 1;
									TEMP2[m] = FindFile[i];
									m++;
								}
							}
								if (have2 == 0)
									printf("目前没有该类型的影厅场次！\n");
								else 
								{
									printf("若您想对场次排序，请从以下选项中选择一项：");
									printf("1.根据放映开始时间排序：\n");
									printf("2.根据场次票价排序：\n");
									printf("3.根据场次余票数排序：\n"); 
									printf("请输入您的选项：");
									scanf("%c",&optionB);
									if (optionB == '1')
										TimeSort(path,cinema,Ling,movie,2); 
										else if (optionB == '2')
											PriceSort(path,cinema,Ling,movie,2);
											else if (optionB == '3')
												RemainSort(path,cinema,Ling,movie,2);
												else
												{
													printf("非法输入！将退出程序！\n");
													exit(1); 
												} 
								}
						} 
					}
						else
						{
							printf("非法输入！将退出程序！\n");
							exit(1);
						}
		}
	}
}  
void HotSession(char path[])
{
}
void SetPositionByLine(FILE *fp,int line){   //将文件指针定位到指定行
    int i=0;
    char buffer[MAX_LENGTH_OF_LINE+1]={'\0'};
    fpos_t pos;
    rewind(fp);
    for(i=0;i<=line;i++)
        fgets(buffer,MAX_LENGTH_OF_LINE,fp);
    fgetpos(fp,&pos);
}
int JudgeSes(char sessions[],char path[])
{
	char id[11]="\0",Id[11]="\0";
	int i=0,j=0,find=0,find1=0,l=0;
	FILE *fptr=NULL;
	strcpy(id,path);
	strcat(id,"\\session_info\\");
	strcat(id,sessions);
	strcat(id,".txt");
	if ((fptr = fopen(id,"r")) == NULL)
	{
		find1 = 0;
		return find1;
	}
	else
	{
		fptr = fopen(id,"r");
		fclose(fptr);
		find1 = 1;
		return find1;
	}
}
Order CreateOrder(char path[],char sessioN[]){
    char pathAC[MAXSIZE]="\0",temp1[MAXSIZE]="\0";
    char MOVIE[MAXSIZE]="\0",CINEMA[MAXSIZE]="\0";
	FILE *fp=NULL;
	Order temp;
    temp.del=0;
    time_t t;
    time(&t);
    struct tm* p;
    p=localtime(&t);
    temp.date.year=p->tm_year+1900;
    temp.date.month=p->tm_mon+1;
    temp.date.day=p->tm_mday;
    temp.date.hour=p->tm_hour;
    temp.date.min=p->tm_min;
    temp.MoneyAccount=10000;
    strcpy(pathAC,path);
    strcat(pathAC,"\\session_info\\");
    strcat(pathAC,sessioN);
    strcat(pathAC,".txt");
    															//拼接出文件路径 
    printf("请输入您的ID:");
    scanf("%s",order.ID);
	if ((fp = fopen(pathAC,"r")) != NULL)
	{
		fscanf(fp,"%s",temp1);
		fscanf(fp,"%s",MOVIE);
		fscanf(fp,"%s",CINEMA);
		strcpy(temp.MovName,MOVIE);
		strcpy(temp.CinName,CINEMA);
	}
	else
	{
		printf("文件打开失败！将退出程序！\n");
		exit(1); 
	}
    return temp;
}
SessionDetail ReadSession(char sessionum[],char path[]){//将场次信息文件写入结构体中
    SessionDetail temp;
    int i,j,seat=0,seatx=0,seaty=0;
    char str1[MAXSIZE]={'\0'};
    
    strcpy(temp.SessioNum,sessionum);
    strcpy(str1,path);
    strcat(str1,".txt");
    
	FILE *fp;
    if((fp = fopen(str1,"r")) == NULL)
        exit(0);
    SetPositionByLine(fp,2);
    fscanf(fp,"%s%s%d",temp.MovName,temp.CinName,&temp.MovieRoom);
    fscanf(fp,"%s%s%d",temp.Startime,temp.Stoptime,&temp.time);
    fscanf(fp,"%d%d%lf",&temp.AllticketNum,&temp.remainTicket,&temp.price);
    fscanf(fp,"%s%s%f%d%d",temp.language,temp.MovType,&temp.discount,&temp.row,&temp.colum);
    for(i = 1;i <= temp.row;i++)
        for(j = 1;j <= temp.colum;j++)
            temp.seat[i][j]=0;
    SetPositionByLine(fp,16);
    while(!feof(fp)){
        fscanf(fp,"%d",seat);
        seatx = seat / 100;
        seaty = seat % 100;
        temp.seat[seatx][seaty]=1;
    }
    fclose(fp);
    return temp;
}

bool Order_Is_Legal(Order order,SessionDetail session){//此处有所修改 
    int i,j,flag=1;
    for(i=0;i<order.SeatNum&&flag;i++)
    {   // for(j=0;j<order.SeatNum&&flag;j++)
            if(session.seat[order.seat[i][0]-1][order.seat[i][1]-1]||
               session.seat[order.seat[i][0]+1][order.seat[i][1]+1]||
			   order.seat[i][0] > session.row||order.seat[i][1] > session.colum)
                flag=0;
	}
	return flag;
}
bool Movie_Is_Repeat(char id[],SessionDetail session,char path[]){
    int flag=1;
    int i=3;
    char movie[MAXSIZE]={'\0'},temp[MAXSIZE]={'\0'};
    if(SearchOrder(id)==0)
        return TRUE;
    strcpy(temp,path);
    strcat(temp,"\\order_info\\");
    strcat(temp,id);
    strcat(temp,".txt");
    FILE *fp;
    if((fp=fopen(temp,"r"))==NULL){
        printf("打开文件失败!\n");
        exit(0);
    }
    SetPositionByLine(fp, i);
    while(!feof(fp)&&flag){
        fscanf(fp,"%s",movie);
        if(strcmp(movie,session.MovName)==0)
            flag=0;
        i=i+17;
        SetPositionByLine(fp, i);
    }
    return flag;
}
bool Time_Is_Conflict(char id[],SessionDetail session,char path[]){
    char time1[MAXSIZE]={'\0'},time2[MAXSIZE]={'\0'},temp[MAXSIZE]={'\0'};
    int Startmin1=time_to_min(session.Startime);
    int Startmin2=0,Stopmin2=0;
    int i=4,flag=1;
    if(SearchOrder(id)==0)
        return TRUE;
    strcpy(temp,path);
    strcat(temp,"\\order_info\\");
    strcpy(temp,id);
    strcat(temp,".txt");
    FILE *fp;
    if((fp=fopen(temp,"r"))==NULL){
        printf("文件打开失败\n");
        exit(0);
    }
    SetPositionByLine(fp, i);
    while(!feof(fp)&&flag){
        fscanf(fp,"%s",time1);
        fscanf(fp,"%s",time2);
        Startmin2=time_to_min(time1);
        Stopmin2=time_to_min(time2);
        if(Startmin1>=Startmin2&&Startmin1<=Stopmin2)
            flag=0;
        i=i+17;
        SetPositionByLine(fp, i);
    }
    return flag;
}
void CurrentSeat(SessionDetail session){
    int i,j;
    printf("当前选座情况如图。其中1代表该位置已被占用，0代表该位置可以选择。\n");
    for(i=0;i<session.row;i++){
        for(j=0;j<session.colum;j++){
            if(j==session.colum-1)
                printf("%d\n",session.seat[i][j]);
            else
                printf("%d ",session.seat[i][j]);
        }
    }
}
Order SelectSeat(Order order,SessionDetail session){
    int i=0,flag;
    
    printf("请输入预订座位数:");
    scanf("%d",&order.SeatNum);
    if(order.SeatNum>3){//购票数大于余票数或者购票数大于3都表示订单失败
        printf("一个场次最多只允许订三个座位!请重新输入购买座位数:");
        scanf("%d",&order.SeatNum);
    }
    if(session.remainTicket<order.SeatNum){
        printf("剩余票数为%d张,您是否要继续购买?\n",session.remainTicket);
        scanf("%d",&flag);
        if(flag){
            printf("请输入购买座位数:");
            scanf("%d",&order.SeatNum);
        }
    }
    CurrentSeat(session);                      //向客户显示当前座位信息
    printf("请输入座位信息:");
    for(i=0;i<order.SeatNum;i++)
        scanf("%d%d",&order.seat[i][0],&order.seat[i][1]);
    if(Order_Is_Legal(order, session)==0){
        printf("请重新选座!\n");
        for(i=0;i<order.SeatNum;i++)
            scanf("%d%d",&order.seat[i][0],&order.seat[i][1]);
    }
    else
        order = CompleteOrder(order, session);
    
    return order;
}
Order CompleteOrder(Order order,SessionDetail session){
    strcpy(order.CinName,session.CinName);
    strcpy(order.MovName,session.MovName);
    strcpy(order.Sessions,session.SessioNum);
    order.MovieRoom=session.MovieRoom;
    order.cost=order.SeatNum*session.price;
    return order;
}
void ReadOrder(Order order,char path[]){         //将订单信息写入文件
    int i=0;
    char name[MAXSIZE]={'\0'};
    strcpy(name,path);
    strcat(name,"\\order_info\\");
    strcat(name,order.ID);
    strcat(name,".txt");
    
    FILE *fp;
    if(SearchOrder(order.ID))
        fp=fopen(name,"a+");
    else
        fp=fopen(name,"w");
    if(fp==NULL){
        printf("写入文件失败!\n");
        exit(0);
    }
    fprintf(fp,"%s\n",order.ID);
    fprintf(fp,"%d\n",order.del);
    fprintf(fp,"%s\n",order.MovName);
    fprintf(fp,"%s\n",order.Startime);
    fprintf(fp,"%s\n",order.Stoptime);
    fprintf(fp,"%s\n",order.CinName);
    fprintf(fp,"%d\n",order.MovieRoom);
    fprintf(fp,"%s\n",order.Sessions);
    fprintf(fp,"%d\n",order.SeatNum);
    for(i=0;i<order.SeatNum;i++)
        fprintf(fp,"%d %d\n",order.seat[i][0],order.seat[i][1]);
    fprintf(fp,"%d\n",order.date.year);
    fprintf(fp,"%d\n",order.date.month);
    fprintf(fp,"%d\n",order.date.day);
    fprintf(fp,"%d\n",order.date.hour);
    fprintf(fp,"%d\n",order.date.min);
    fprintf(fp,"%d\n",order.cost);
}
void DealOrder(Order order,char path8[])
{
	FILE *fptr=NULL,*fptr1=NULL,*fptr2=NULL;
	char path[255]="\0",SerialNum[MAXSIZE] = "\0",moviename1[MAXSIZE] = "\0",starttime[6]="\0";
	char cinema1[5]="\0",lang[4]="\0",type[4]="\0",endtime[6]="\0";
	int  line=0,column=0,hall=0,totalseat=0,remain=0,length=0,coupon=0;
	double price=0.0;
	int *Occupied=NULL;  //用于读取场次文件里的各项数据/字符
	int seat1=0,remain1=0,k=0,k1=0,k2=0,k3=0,l=0;//占的座位的添加 
	int SW=0,GW=0;
	
	strcpy(path,path8);
	strcat(path,"\\session_info\\");
	strcat(path,order.Sessions);
	strcat(path,".txt");		
							//拼接出文件路径
							 
	if((fptr = fopen(path,"r+")) == NULL)//寻找名字叫该场次的场次文件 (该目录下） 
	{
     	printf("文件打开失败！将退出系统\n");
    	order.legal = 0;
    	exit(1); 
    }
    else
	{
		fptr = fopen(path,"r+");//每行读入该场次文件中的对应数据，放在变量里 
		fscanf(fptr,"%s",SerialNum);
	    fscanf(fptr,"%s",moviename1);
		fscanf(fptr,"%s",cinema1);
		fscanf(fptr,"%d",&hall);
		fscanf(fptr,"%s",starttime);
		fscanf(fptr,"%s",endtime);
		fscanf(fptr,"%d",&length);
		fscanf(fptr,"%d",&totalseat);
		fscanf(fptr,"%d",&remain);
		fscanf(fptr,"%lf",&price);
		fscanf(fptr,"%s",lang);
		fscanf(fptr,"%s",type);
		fscanf(fptr,"%d",&coupon);
		fscanf(fptr,"%d",&line);
		fscanf(fptr,"%d",&column);
		Occupied = (int *)malloc((totalseat - remain) * sizeof(int));
		if (!Occupied)
		{
			printf("数组打开失败！将退出系统！\n");
			fclose(fptr);
			order.legal = 0;
			exit(1);
		}
		else
		{
			for (k = 0;k < totalseat - remain;k++)
				fscanf(fptr,"%d",&Occupied[k]);
			remain1 = remain;
			remain -= order.SeatNum;//该票购买，剩余票数-1 
			fclose(fptr);//关闭文件 
			if((fptr1 = fopen(path,"w+")) == NULL)//寻找名字叫该场次的场次文件 (该目录下） 
			{
        		printf("文件打开失败！将退出系统！\n");
        		order.legal = 0;
				exit(1); 
    		}
    		else
    		{
				fptr1 = fopen(path,"w+");//把存在各个变量里的场次信息文件里的各项数据弄回该文件，方便修改票余数 
				fprintf(fptr1,"%s\n",SerialNum);
				fprintf(fptr1,"%s\n",moviename1);
			    fprintf(fptr1,"%s\n",cinema1);
				fprintf(fptr1,"%d\n",hall);
				fprintf(fptr1,"%s\n",starttime);
				fprintf(fptr1,"%s\n",endtime);
				fprintf(fptr1,"%d\n",length);
				fprintf(fptr1,"%d\n",totalseat);
				fprintf(fptr1,"%d\n",remain);
				fprintf(fptr1,"%lf\n",price);
				fprintf(fptr1,"%s\n",lang);
				fprintf(fptr1,"%s\n",type);
				fprintf(fptr1,"%d\n",coupon);
				fprintf(fptr1,"%d\n",line);
				fprintf(fptr1,"%d\n",column);
				for (k = 0;k < totalseat - remain1;k++)
					fprintf(fptr1,"%d\n",Occupied[k]);
				fclose(fptr1);
			}
			if((fptr2 = fopen(path,"a")) == NULL)//寻找名字叫该影厅的影厅文件 (该目录下） 
			{
        		remain += order.SeatNum;
				printf("文件打开失败！将退出系统！\n");
        		order.legal = 0;
    			exit(1); 
			}
    		else
    		{
				fptr2 = fopen(path,"a");
				for (k = 0;k < order.SeatNum;k++)
				{
					SW = order.seat[k][0] * 100;
					GW = order.seat[k][1];
					seat1 = SW + GW;
					fprintf(fptr2,"%d\n",seat1);//在影厅文件中最后每行每行添加已占座位数 
				}
				fclose(fptr2);
				order.legal = 1;
			}
		}	
	}
}
int TIME(Order order,char path[])
{
	int timeexceed=0;
	long long int totaltime=0,ordertime=0;
	time_t It;
	time(&It);
	struct tm* ptr;
	ptr = localtime(&It);
	return timeexceed;
}
Order Pay(Order order)
{
    order.MoneyAccount=order.MoneyAccount-order.cost;
    return order;
}
void Recover(Order order,char path[])
{
	FILE *fpt=NULL,*fpt1=NULL;
	int k=0;
	char path4[255]="\0",SerialNum[MAXSIZE] = "\0",moviename1[MAXSIZE] = "\0",starttime[6]="\0";
	char cinema1[5]="\0",lang[4]="\0",type[4]="\0",coupon[MAXSIZE]="\0",endtime[6]="\0";
	int  line=0,column=0,hall=0,totalseat=0,remain=0,length=0;
	double price=0.0;
	int *Occupied1=NULL;  //用于读取场次文件里的各项数据/字符
	strcpy(path4,path);		
	strcat(path4,"\\session_info\\");
	strcat(path4,order.Sessions);
	strcat(path4,".txt");
		if((fpt = fopen(path4,"w+")) == NULL)//寻找名字叫该场次的场次文件 (该目录下） 
        printf("Open the file failure.Fail to recover.\n");
    	else
		{
			fpt = fopen(path4,"w+");//每行读入该场次文件中的对应数据，放在变量里 
			fscanf(fpt,"%s",SerialNum);
		    fscanf(fpt,"%s",moviename1);
		    fscanf(fpt,"%s",cinema1);
			fscanf(fpt,"%d",&hall);
			fscanf(fpt,"%s",starttime);
			fscanf(fpt,"%s",endtime);
			fscanf(fpt,"%d",&length);
			fscanf(fpt,"%d",&totalseat);
			fscanf(fpt,"%d",&remain);
			fscanf(fpt,"%lf",&price);
			fscanf(fpt,"%s",lang);
			fscanf(fpt,"%s",type);
			fscanf(fpt,"%s",coupon);
			fscanf(fpt,"%d",&line);
			fscanf(fpt,"%d",&column);
			Occupied1 = (int *)malloc((totalseat - remain) * sizeof(int));
			if (!Occupied1)
			{
				printf("Can't create the array!Fail to recover.\n");
				fclose(fpt);
			}
			else
			{
				for (k = 0;k < totalseat - remain;k++)
					fscanf(fpt,"%d",&Occupied1[k]);
				remain += order.SeatNum;//
				fclose(fpt);//关闭文件 
				if((fpt1 = fopen(path4,"w+")) == NULL)//寻找名字叫该场次的场次文件 (该目录下） 
				{
        			printf("Open the file failure...\n");
        			order.legal = 0; 
    			}
    				else
    				{
						fpt1 = fopen(path4,"w+");//把存在各个变量里的场次信息文件里的各项数据弄回该文件，方便修改票余数 
						fprintf(fpt1,"%s\n",SerialNum);
						fprintf(fpt1,"%s\n",moviename1);
			   			fprintf(fpt1,"%s\n",cinema1);
						fprintf(fpt1,"%d\n",hall);
						fprintf(fpt1,"%s\n",starttime);
						fprintf(fpt1,"%s\n",endtime);
						fprintf(fpt1,"%d\n",length);
						fprintf(fpt1,"%d\n",totalseat);
						fprintf(fpt1,"%d\n",remain);
						fprintf(fpt1,"%lf\n",price);
						fprintf(fpt1,"%s\n",lang);
						fprintf(fpt1,"%s\n",type);
						fprintf(fpt1,"%s\n",coupon);
						fprintf(fpt1,"%d\n",line);
						fprintf(fpt1,"%d\n",column);
						for (k = 0;k < totalseat - remain;k++)
						fprintf(fpt1,"%d\n",Occupied1[k]);
						fclose(fpt1);
					} 
			} 
		} 
}
int OrderSystem(char path[])
{
	int result=0,judge,legal1,i=0,i1=0,SRHF=0,SesLegal=0,i2=0;
	SessionDetail session;
	char Session[MAXSIZE],pathAB[MAXSIZE]="\0";
	int JudgeOrder=0;
	char TimeExceed='\0'; 
	strcpy(pathAB,path);
	printf("**********欢迎进入购票系统！**********\n");
	printf("        请输入您想购买的场次："); 
	scanf("%s",Session);
	SRHF = 0;
	TimeExceed = 0;
	time_t It;
	SesLegal = JudgeSes(Session,pathAB);
	if (SesLegal == 1)		//场次合法 
	{
		order = CreateOrder(pathAB,Session);	
		Detail = ReadSession(Session,pathAB); //通过用户选择的场次返还更具体的信息     	   
		if (Time_Is_Conflict(order.ID, Detail) == 0)
        	printf("您预订的电影:%s和您已购买的电影:%s时间上冲突\n",order.MovName,session.MovName);
    	if (Movie_Is_Repeat(order.ID, Detail,pathAB) == 0)
        	printf("您之前已经预定过该电影，您确定要再次预订吗？\n");
		order = SelectSeat(order,Detail);		   //用户开始选座 
		ReadOrder(order); 
		DealOrder(order,pathAB);
		if (order.legal == 1) 
		{
			printf("请问您要选择删除订单吗？如果删除，请输入1；否则输入0。请不要输入其他字符。\n");
			scanf("%d",&order.del);
			if (order.del == 0)//如果订单有效 
			{
				printf("您是否要支付订单？支付请输入1，否则请输入0。\n请输入：");
				scanf("%c",&TimeExceed);
				if (TimeExceed == '1')//选择支付 
				{
					order = Pay(order);
					printf("成功完成订单支付!\n");
					JudgeOrder = 1;
					return JudgeOrder;
				}
				else
				{ 
					Recover(order,pathAB); 
					printf("订单未支付，此次订单无效！\n");
					JudgeOrder = 0;
					return JudgeOrder;
				} 
			}
				else if (order.del == 1)
				{
					Recover(order,pathAB);
					printf("成功删除订单！\n");
					JudgeOrder = 0;
					return JudgeOrder;
				}
		}
			else if (order.legal == 0)
			{
				printf("订票失败！将直接退回查询&购票系统！\n");
				JudgeOrder = 0;
				return JudgeOrder;
			}
	}
	else
	{ 
		printf("该场次不存在！将直接退回查询&购票系统！\n"); 
		JudgeOrder = 0;
		return JudgeOrder; 
	}
}
void SEARCH(char path[]) 
{
	char pathAA[MAXSIZE]="\0";
	strcpy(pathAA,path);
	char option='\0',EntOS='\0';
	int srhf=0,i=0,i1=0;
	srhf = 0;
	for (i = 0;srhf != 1;i++)
	{
		printf("*********欢迎来到查询&购票系统!**********\n");
		printf("\t1.根据影片名搜索\n");
		printf("\t2.根据影片名+影院名搜索\n");
		printf("\t3.热门场次推荐\n");
		printf("************************************************\n");	
		printf("\t请选择序号:");
		EntOS = 0;
		scanf("%c",&option);
		if (option >= '1' && option <= '3')
		{
			srhf = 1;
			if (option == '1')
				MovSearch(pathAA);
				else if (option == '2')
					MovAndCinSearch(pathAA);
					else if (option == '3')
						HotSession(pathAA);
			printf("请问您是否选择订票?\n");
			printf("如果选择订票，请输入1;否则，输入0.\n");
			printf("温馨提示：请勿输入其他字符.\n");
			printf("请输入您的选项：\n");
			scanf("%c",&EntOS);
			if (EntOS == '1')
			{
				srhf = OrderSystem(pathAA);
				if (srhf == 0)
					printf("购票失败！将重新进入查询&购票系统。\n");
					else if (srhf == 1)
						printf("购票成功！将退出查询&购票系统。\n");
			} 
			else if (EntOS !='0' && EntOS != '1')
			{
				printf("非法输入!将强行退出程序！\n");
				exit(1);
			}
			else if (EntOS == '0')
				printf("未选择购票。将退出查询&购票系统。n"); 
		}
		else 
		{ 
			printf("非法输入!将强行退出程序！\n");
			exit(1); 
		} 
	}
}
#endif
