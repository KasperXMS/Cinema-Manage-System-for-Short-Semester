#ifndef _SEARCHINGSYSTEM_H
#define _SEARCHINGSYSTEM_H


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <io.h>
#include <direct.h>
#include <windows.h>
#include <time.h>
#include <ctype.h>
#define MAXSIZE 101
#define MAX_LENGTH_OF_LINE 1024
typedef struct Basic{
	char IdOfUser[11];
	char Movie[MAXSIZE];
	char Cinema[MAXSIZE]; 
}Basic;
typedef struct Order{  			//information of order
    char ID[MAXSIZE];           //ID of the user
    char MovName[MAXSIZE];      //name of the movie
    char CinName[MAXSIZE];      //name of the cinema
    char Sessions[MAXSIZE];		//session of the movie
    int MovieRoom; 				//number of the hall in the cinema
	int SeatNum;                //numbers of the seats that the user want to order
	int seat[3][2];             //positions of seats that the user want to order
    int del;                    //whether to delete the order
    int legal;					//judge whether the order is legal
	struct {
    	int year;
    	int month;
    	int day;
    	int hour;
    	int min;				//time when the order begins 
	}date;
	int cost;					//total cost of these seats
}Order;
typedef struct movie{			//场次信息结构体
    char SessioNum[13];     //场次号
    char MovName[MAXSIZE];  //影片名
    char CinName[MAXSIZE];  //影院名
    int MovieRoom;          //影厅
    char Startime[6];           //开始时间
    char Stoptime[6];           //结束时间
    int time;               //总时长
    int AllticketNum;       //总票数
    int remainTicket;       //余票数
    double price;           //票价
    char language[20];      //语言类型
    char MovType[6];        //影片类型
    int row;                //总排数
    int colum;              //总列数
    int seat[MAXSIZE][MAXSIZE];//座位信息
}SessionDetail;
void MovSearch(char path[]);
void CinSearch(char path[]);
void MovAndCinSearch(char path[]);
void LangSearch(char path[]);
void TypeSearch(char path[]);
void HotSession(char path[]);
void SEARCH(char path[]);
int time_to_min(char time[]);
void SetPositionByLine(FILE *fp,int line);
int JudgeSes(char session,char path[]);
Order CreateOrder(char session[]);
char *MovieSearch(Basic basics,char path[]);	//search sessions concerning this movie
char *CinemaSearch(Basic basics);	//search sessions concering this cinema
SessionDetail ReadSession(char sessionum[],char path[]);
void CurrentSeat(SessionDetail session);
bool Seat_Is_Legal(Order order,SessionDetail session);
bool Time_Is_Conflict(char id[],SessionDetail session);
bool Money_Is_Enough(Order order);
bool Moive_Is_Repeat(char id[],SessionDetail session);
Order SelectSeat(Order order,SessionDetail session);
Order CompleteOrder(Order order,SessionDetail session);
char *GetPath(Order order);			//get the path of the file of the session
void DealOrder(Order order,char path8[]); 		//deal with the order and change information in the files of session
void Pay(Order order);
void Recover(Order order);
int OrderSystem(char path[]);

Basic basics;
Order order;
SessionDetail Detail;
void MovSearch(char path[])
{
}
void CinSearch(char path[])
{
}
void MovAndCinSearch(char path[])
{
} 
void LangSearch(char path[])
{
} 
void TypeSearch(char path[])
{
} 
void HotSession(char path[])
{
}
int time_to_min(char time[]){   //将字符串时间格式转换为分钟
    char hour[3]={'\0'};
    char min[3]={'\0'};
    int h=0;
    int m=0;
    strncpy(hour,time,2);
    strncpy(min,time+3,2);
    h=atoi(hour);
    m=atoi(min);
    return h*60+m;
}
void SetPositionByLine(FILE *fp,int line){   //将文件指针定位到指定行
    int i=0;
    char buffer[MAX_LENGTH_OF_LINE+1]={'\0'};
    fpos_t pos;
    rewind(fp);
    for(i=1;i<line;i++)
        fgets(buffer,MAX_LENGTH_OF_LINE,fp);
    fgetpos(fp,&pos);
}
int JudgeSes(char session,char path[])
{
	char id[11]="\0",Id[11]="\0";
	int i=0,j=0,find=0,find1=0,l=0;
	FILE *fptr=NULL;
	strcpy(id,path);
	if ((fptr = fopen(id,"r")) == NULL)
	{
		find1 = 0;
		return find1;
	}
	else
	{
		fptr = fopen(id,"r");
		fclose(fptr);
		find1 = 1;
		return find1;
	}
	/*if ((fptr = fopen("C:/Users/DELL/Desktop/IOCS/accounts/user/Users.acc","r")) == NULL)//在用户名文件里找人 
			{
				printf("Fail to read!\n");
				l = 0;
				return l;
			}
			else
				fptr = fopen("C:/Users/DELL/Desktop/IOCS/accounts/user/Users.acc","r");
			while(fgets(Id,12,fptr) != NULL && find != 1)//遍历每行的id，直至找到或者全部搜完 
     		{
     			if (strcmp(id,Id) == 0)//找到对应的用户id 
     			{
					find = 1;
					printf("Successfully Find The User!\n");//寻找到了用户的ID 
					if (strlen(basics.MovieOrCinema) == 4)
						l = 2;
					else
						l = 1;
					return l;
				}
     		}
     		if (fgets(Id,12,fptr) == NULL && find != 1 )//遍历完并且没有找到 
			{
				printf("Can't Find The User!\n");
				l = 0;
				return l;
			} 
		}*/
	
}
Order CreateOrder(char session[],char path[]){
    char pathAC[MAXSIZE]="\0",temp1[MAXSIZE]="\0";
	FILE *fp=NULL;
	Order temp;
    temp.del=0;
    time_t t;
    time(&t);
    struct tm* p;
    p=localtime(&t);
    temp.date.year=p->tm_year+1900;
    temp.date.month=p->tm_mon+1;
    temp.date.day=p->tm_mday;
    temp.date.hour=p->tm_hour;
    temp.date.min=p->tm_min;
    
    strcpy(pathAC,path);
    strcat(pathAC,"\\");
    															//拼接出文件路径 
    if ((fp = fopen(pathAC,"r")) != NULL)
	{
		fscanf(fp,"%s",temp);
		fscanf(fp,"%s",basics.Movie);
		fscanf(fp,"%s",basics.Cinema);
	strcpy(temp.MovName,basics.Movie);
	strcpy(temp.CinName,basics.Cinema);
	}
	else
	{
		printf("文件打开失败！将退出程序！\n");
		exit(1); 
	}
	/*if(strlen(basics.MovieOrCinema) == 4)
		strcpy(temp.CinName,basics.MovieOrCinema);
	else
		strcpy(temp.MovName,basics.MovieOrCinema);*/
    return temp;
}

char *MovieSearch(Basic basics,char path9[])
{
	int i=0,j=0,k=0;
	char movie[MAXSIZE]="\0";
	char path[255]="\0";
	static char Changci[MAXSIZE]="\0";
	char path1[255]="\0";
	FILE *fptr=NULL,*fptr1=NULL;
	strcpy(path,"C:\Users/DELL/Desktop/IOCS/cma_info");
	strcat(path,basics.MovieOrCinema);
	strcat(path,".txt");//打开对应的写着影片名的文件，读取所有该影片的场次编号 
	if ((fptr = fopen(path,"r")) == NULL)
	{
		printf("Open Fail Failure...\n");
		return NULL;
	}
	else 
	{
		fptr = fopen(path,"r");//打开影片名文件 
		if(fgets(Changci,MAXSIZE,fptr) == NULL)
			printf("No Session Now For This Movie.\n");
		else
		{ 
			for (i = 0;fgets(Changci,MAXSIZE,fptr) != NULL;i++)//读取每行的场次编号 
			{
				fscanf(fptr,"%s",Changci);
				strcpy(path1,"C:/Users/DELL/Desktop/IOCS/sessions/");
				strcat(path1,Changci);
				strcat(path1,".ses");//读取场次编号文件 
				if ((fptr1 = fopen(path1,"r")) == NULL)
				{
					printf("Open Fail Failure...\n");
					return NULL;
				}
					else
					{
						printf("      Cinema            Movie            Date      Hall      Session      Price\n");
						char CC[MAXSIZE]="\0";
						int line=0,column=0;
						char MOVIENAME[MAXSIZE]="\0",CINEMA[MAXSIZE]="\0",DATE[4]="\0",START[6]="\0",END[6]="\0";
						char LANG[6]="\0",TYPE[6]="\0",COUPON[MAXSIZE]="\0";
						int HALL=0,LENGTH=0,TOTAL=0,REMAIN=0;
						double PRICE=0.0;
						fptr1 = fopen(path1,"r");
						fscanf(fptr1,"%s",CC);
						fscanf(fptr1,"%s",MOVIENAME);
						fscanf(fptr1,"%s",CINEMA);
						fscanf(fptr1,"%d",&HALL);
						fscanf(fptr1,"%s",START);
						fscanf(fptr1,"%s",END);
						fscanf(fptr1,"%d",&LENGTH);
						fscanf(fptr1,"%d",&TOTAL);
						fscanf(fptr1,"%d",&REMAIN);
						fscanf(fptr1,"%lf",&PRICE);//按每行顺序读取所需数据 
						fscanf(fptr1,"%s",LANG);
						fscanf(fptr1,"%s",TYPE);
						fscanf(fptr1,"%s",COUPON);
						fscanf(fptr1,"%d",&line);
						fscanf(fptr1,"%d",&column);
						for (i = 4;i < 8;i++)
							DATE[i] = CC[i];//日期信息从场次编号中获取 
						printf("%10s%24s%13d%10d%16s%9.2lf\n",CINEMA,MOVIENAME,DATE,HALL,CC,PRICE);//打印所有的该影片场次具体信息 
						printf("Please Enter The Session You Want To Order:");
						scanf("%s",Changci);//用户输入想要的场次 
					}
			}
		}
	}
	return Changci;
}
char *CinemaSearch(Basic basics)
{
	int i=0,j=0,k=0;
	char movie[MAXSIZE]="\0";
	char path[255]="\0";
	static char seSSion[MAXSIZE]="\0";
	char path1[255]="\0";
	FILE *fptr=NULL,*fptr1=NULL;
	strcpy(path,"C:/Users/DELL/Desktop/IOCS/cma_info");
	strcat(path,basics.MovieOrCinema);
	strcat(path,".txt");//打开对应的写着影片名的文件，读取所有该影片的场次编号 
	if ((fptr = fopen(path,"r")) == NULL)
	{
		printf("Open Fail Failure...\n");
		return NULL;
	}
	else 
	{
		fptr = fopen(path,"r");//打开影片名文件 
		if(fgets(seSSion,MAXSIZE,fptr) == NULL)
			printf("No Session Now For This Movie.\n");
		else
		{ 
			for (i = 0;fgets(seSSion,MAXSIZE,fptr) != NULL;i++)//读取每行的场次编号 
			{
				fscanf(fptr,"%s",seSSion);
				strcpy(path1,"C:/Users/DELL/Desktop/IOCS/sessions/");
				strcat(path1,seSSion);
				strcat(path1,".ses");//读取场次编号文件 
				if ((fptr1 = fopen(path1,"r")) == NULL)
				{
					printf("Open Fail Failure...\n");
					return NULL;
				}
					else
					{
						printf("      Cinema            Movie            Date      Hall      Session      Price\n");
						char CC[MAXSIZE]="\0";
						int line=0,column=0;
						char MOVIENAME[MAXSIZE]="\0",CINEMA[MAXSIZE]="\0",DATE[4]="\0",START[6]="\0",END[6]="\0";
						char LANG[6]="\0",TYPE[6]="\0",COUPON[MAXSIZE]="\0";
						int HALL=0,LENGTH=0,TOTAL=0,REMAIN=0;
						double PRICE=0.0;
						fptr1 = fopen(path1,"r");
						fscanf(fptr1,"%s",CC);
						fscanf(fptr1,"%s",MOVIENAME);
						fscanf(fptr1,"%s",CINEMA);
						fscanf(fptr1,"%d",&HALL);
						fscanf(fptr1,"%s",START);
						fscanf(fptr1,"%s",END);
						fscanf(fptr1,"%d",&LENGTH);
						fscanf(fptr1,"%d",&TOTAL);
						fscanf(fptr1,"%d",&REMAIN);
						fscanf(fptr1,"%lf",&PRICE);//按每行顺序读取所需数据 
						fscanf(fptr1,"%s",LANG);
						fscanf(fptr1,"%s",TYPE);
						fscanf(fptr1,"%s",COUPON);
						fscanf(fptr1,"%d",&line);
						fscanf(fptr1,"%d",&column);
						for (i = 4;i < 8;i++)
							DATE[i] = CC[i];//日期信息从场次编号中获取 
						printf("%10s%24s%13d%10d%16s%9.2lf\n",CINEMA,MOVIENAME,DATE,HALL,CC,PRICE);//打印所有的该影片场次具体信息 
						printf("Please Enter The Session You Want To Order:");
						scanf("%s",seSSion);//用户输入想要的场次 
					}
			}
		}
	}
	return Changci;
}
SessionDetail ReadSession(char sessionum[],char path[]){//将场次信息文件写入结构体中
    SessionDetail temp;
    int i,j,seat=0,seatx=0,seaty=0;
    char str[5]={'\0'};
    char str1[MAXSIZE]={'\0'};
    strcpy(temp.SessioNum,sessionum);
    
	strcpy(str1,path);
    strcat(str1,sessionum);
    strcat(str1,".txt");
    												//拼接出场次文件路径 
	FILE *fp=NULL;
    if((fp = fopen(str1,"r"))==NULL)
    {
		printf("文件打开失败！将退出系统！\n");  
		exit(1);
	}
    SetPositionByLine(fp,0);
    fscanf(fp,"%s%s%d",temp.MovName,temp.CinName,&temp.MovieRoom);
    fscanf(fp,"%s%s%d",temp.Startime,temp.Stoptime,&temp.time);
    fscanf(fp,"%d%d%lf",&temp.AllticketNum,&temp.remainTicket,&temp.price);
    fscanf(fp,"%s%s%d%d",temp.language,temp.MovType,&temp.row,&temp.colum);
    for(i = 0;i < temp.row;i++)
        for(j = 0;j < temp.colum;j++)
            temp.seat[i][j]=0;
    SetPositionByLine(fp,13);
    while(!feof(fp))
	{
        fscanf(fp,"%s",str);
        seat = atoi(str);
        seatx = seat / 100;
        seaty = seat % 100;
        temp.seat[seatx-1][seaty-1]=1;
    }
    fclose(fp);
    return temp;
}
bool Seat_Is_Legal(Order order,SessionDetail session){   //判断选座是否合法
    int i,flag=1;
    for(i=0;i<order.SeatNum&&flag;i++){
        if(order.seat[i][1]==2){
            if(session.seat[order.seat[i][0]][order.seat[i][1]-1]||
               session.seat[order.seat[i][0]][order.seat[i][0]+2])
                flag=0;
        }
        else if(order.seat[i][1]==session.colum-1){
            if(session.seat[order.seat[i][0]][order.seat[i][1]+1]||
               session.seat[order.seat[i][0]][order.seat[i][0]-2])
                flag=0;
        }
        else if(order.seat[i][1]==1){
            if(session.seat[order.seat[i][0]][order.seat[i][1]+2])
                flag=0;
        }
        else if(order.seat[i][1]==session.colum){
            if(session.seat[order.seat[i][0]][order.seat[i][1]-2])
                flag=0;
        }
        else{
            if(session.seat[order.seat[i][0]][order.seat[i][1]-2]||
               session.seat[order.seat[i][0]][order.seat[i][0]+2]||
               session.seat[order.seat[i][0]][order.seat[i][0]]||
               order.seat[i][0]>session.row||order.seat[i][1]>session.colum)
                flag=0;
        }
    }
    return flag;
}
bool Money_Is_Enough(Order order){
    if(order.MoneyAccount<order.cost)
        return FALSE;
    return TRUE;
}
bool Moive_Is_Repeat(char id[],SessionDetail session){
    int flag=1;
    int i=3;
    char movie[MAXSIZE]={'\0'};
    strcat(id,".txt");
    if(SearchOrder(id)==0)
        return TRUE;
    FILE *fp;
    if((fp=fopen(id,"r"))==NULL){
        printf("打开文件失败!\n");
        exit(0);
    }
    SetPositionByLine(fp, i);
    while(!feof(fp)&&flag){
        fscanf(fp,"%s",movie);
        if(strcmp(movie,session.MovName)==0)
            flag=0;
        i=i+17;
        SetPositionByLine(fp, i);
    }
    return flag;
}
bool Time_Is_Conflict(char id[],SessionDetail session){
    char time[MAXSIZE]={'\0'};
    int Startmin1=time_to_min(session.Startime);
    int Stopmin1=time_to_min(session.Stoptime);
    int Startmin2=0;
    strcat(id,".txt");
    int i=4,flag=1;
    if(SearchOrder(id)==0)
        return TRUE;
    
    FILE *fp;
    if((fp=fopen(id,"r"))==NULL){
        printf("文件打开失败\n");
        exit(0);
    }
    SetPositionByLine(fp, i);
    while(!feof(fp)&&flag){
        fscanf(fp,"%s",time);
        Startmin2=time_to_min(time);
        if(Startmin2>=Startmin1&&Stopmin1)
            flag=0;
        i=i+17;
        SetPositionByLine(fp, i);
    }
    return flag;
}
void CurrentSeat(SessionDetail session,){
    int i,j;
    printf("当前选座情况如图。其中1代表该位置已被占用，0代表该位置可以选择。\n");
    for(i=0;i<session.row;i++){
        for(j=0;j<session.colum;j++){
            if(j==session.colum-1)
                printf("%d\n",session.seat[i][j]);
            else
                printf("%d ",session.seat[i][j]);
        }
    }
}
Order SelectSeat(Order order,SessionDetail session){
    int i=0,flag;
    
    printf("请输入预订座位数:");
    scanf("%d",&order.SeatNum);
    if(order.SeatNum>3){//购票数大于余票数或者购票数大于3都表示订单失败
        printf("一个场次最多只允许订三个座位!请重新输入购买座位数:");
        scanf("%d",&order.SeatNum);
    }
    if(session.remainTicket<order.SeatNum){
        printf("剩余票数为%d张,您是否要继续购买?\n",session.remainTicket);
        scanf("%d",&flag);
        if(flag){
            printf("请输入购买座位数:");
            scanf("%d",&order.SeatNum);
        }
    }
    CurrentSeat(session);                      //向客户显示当前座位信息
    printf("请输入座位信息:");
    for(i=0;i<order.SeatNum;i++)
        scanf("%d%d",&order.seat[i][0],&order.seat[i][1]);
    if(Order_Is_Legal(order, session)==0){
        printf("请重新选座!\n");
        for(i=0;i<order.SeatNum;i++)
            scanf("%d%d",&order.seat[i][0],&order.seat[i][1]);
    }
    else
        order = CompleteOrder(order, session);
    
    return order;
}
Order CompleteOrder(Order order,SessionDetail session){
    strcpy(order.CinName,session.CinName);
    strcpy(order.MovName,session.MovName);
    strcpy(order.Sessions,session.SessioNum);
    order.MovieRoom=session.MovieRoom;
    order.cost=order.SeatNum*session.price;
    return order;
}
/*char *GetPath(Order order)
{
	int k=0; 
	char cc[MAXSIZE]="\0",iD[5]=".ses";
	static char path[255]="\0";
	strcpy(cc, order.Sessions);
	for (k = 0;cc[k] != '\n';k++);
		cc[k] = '\0';
	strcat(cc,iD);//SerialNum即为该场次的文件名    
	strcpy(path,"C:/Users/DELL/Desktop/IOCS/sessions/");
	strcat(path,cc);
	for (k = 0;path[k] != '\0';k++);
		path[k] = '\0'; //截取出正确的文件路径，放入path 
	return path;
}*/

void DealOrder(Order order,char path8[])
{
	FILE *fptr=NULL,*fptr1=NULL,*fptr2=NULL;
	char path[255]="\0",SerialNum[MAXSIZE] = "\0",moviename1[MAXSIZE] = "\0",starttime[6]="\0";
	char cinema1[5]="\0",lang[4]="\0",type[4]="\0",endtime[6]="\0";
	int  line=0,column=0,hall=0,totalseat=0,remain=0,length=0,coupon=0;
	double price=0.0;
	int *Occupied=NULL;  //用于读取场次文件里的各项数据/字符
	int seat1=0,remain1=0,k=0,k1=0,k2=0,k3=0,l=0;//占的座位的添加 
	int SW=0,GW=0;
	
	strcpy(path,path8);		
							//拼接出文件路径
							 
	if((fptr = fopen(path,"r+")) == NULL)//寻找名字叫该场次的场次文件 (该目录下） 
	{
     	printf("文件打开失败！将退出系统\n");
    	order.legal = 0;
    	exit(1); 
    }
    else
	{
		fptr = fopen(path,"r+");//每行读入该场次文件中的对应数据，放在变量里 
		fscanf(fptr,"%s",SerialNum);
	    fscanf(fptr,"%s",moviename1);
		fscanf(fptr,"%s",cinema1);
		fscanf(fptr,"%d",&hall);
		fscanf(fptr,"%s",starttime);
		fscanf(fptr,"%s",endtime);
		fscanf(fptr,"%d",&length);
		fscanf(fptr,"%d",&totalseat);
		fscanf(fptr,"%d",&remain);
		fscanf(fptr,"%lf",&price);
		fscanf(fptr,"%s",lang);
		fscanf(fptr,"%s",type);
		fscanf(fptr,"%d",&coupon);
		fscanf(fptr,"%d",&line);
		fscanf(fptr,"%d",&column);
		Occupied = (int *)malloc((totalseat - remain) * sizeof(int));
		if (!Occupied)
		{
			printf("数组打开失败！将退出系统！\n");
			fclose(fptr);
			order.legal = 0;
			exit(1);
		}
		else
		{
			for (k = 0;k < totalseat - remain;k++)
				fscanf(fptr,"%d",&Occupied[k]);
			remain1 = remain;
			remain -= order.SeatNum;//该票购买，剩余票数-1 
			fclose(fptr);//关闭文件 
			if((fptr1 = fopen(path,"w+")) == NULL)//寻找名字叫该场次的场次文件 (该目录下） 
			{
        		printf("文件打开失败！将退出系统！\n");
        		order.legal = 0;
				exit(1); 
    		}
    		else
    		{
				fptr1 = fopen(path,"w+");//把存在各个变量里的场次信息文件里的各项数据弄回该文件，方便修改票余数 
				fprintf(fptr1,"%s\n",SerialNum);
				fprintf(fptr1,"%s\n",moviename1);
			    fprintf(fptr1,"%s\n",cinema1);
				fprintf(fptr1,"%d\n",hall);
				fprintf(fptr1,"%s\n",starttime);
				fprintf(fptr1,"%s\n",endtime);
				fprintf(fptr1,"%d\n",length);
				fprintf(fptr1,"%d\n",totalseat);
				fprintf(fptr1,"%d\n",remain);
				fprintf(fptr1,"%lf\n",price);
				fprintf(fptr1,"%s\n",lang);
				fprintf(fptr1,"%s\n",type);
				fprintf(fptr1,"%d\n",coupon);
				fprintf(fptr1,"%d\n",line);
				fprintf(fptr1,"%d\n",column);
				for (k = 0;k < totalseat - remain1;k++)
					fprintf(fptr1,"%d\n",Occupied[k]);
				fclose(fptr1);
			}
			if((fptr2 = fopen(path,"a")) == NULL)//寻找名字叫该影厅的影厅文件 (该目录下） 
			{
        		remain += order.SeatNum;
				printf("文件打开失败！将退出系统！\n");
        		order.legal = 0;
    			exit(1); 
			}
    		else
    		{
				fptr2 = fopen(path,"a");
				for (k = 0;k < order.SeatNum;k++)
				{
					SW = order.seat[k][0] * 100;
					GW = order.seat[k][1];
					seat1 = SW + GW;
					fprintf(fptr2,"%d\n",seat1);//在影厅文件中最后每行每行添加已占座位数 
				}
				fclose(fptr2);
				order.legal = 1;
			}
		}	
	}
}
int TIME(Order order,char path[])
{
	int timeexceed=0;
	long long int totaltime=0,ordertime=0;
	time_t It;
	time(&It);
	struct tm* ptr;
	ptr = localtime(&It);
	return timeexceed;
}
void Pay(Order order,char path[])
{

}
void Recover(Order order,char path[])
{
	FILE *fpt=NULL,*fpt1=NULL;
	int k=0;
	char path4[255]="\0",SerialNum[MAXSIZE] = "\0",moviename1[MAXSIZE] = "\0",starttime[6]="\0";
	char cinema1[5]="\0",lang[4]="\0",type[4]="\0",coupon[MAXSIZE]="\0",endtime[6]="\0";
	int  line=0,column=0,hall=0,totalseat=0,remain=0,length=0;
	double price=0.0;
	int *Occupied1=NULL;  //用于读取场次文件里的各项数据/字符
	strcpy(path4,GetPath(order));		
		if((fpt = fopen(path4,"w+")) == NULL)//寻找名字叫该场次的场次文件 (该目录下） 
        printf("Open the file failure.Fail to recover.\n");
    	else
		{
			fpt = fopen(path4,"w+");//每行读入该场次文件中的对应数据，放在变量里 
			fscanf(fpt,"%s",SerialNum);
		    fscanf(fpt,"%s",moviename1);
		    fscanf(fpt,"%s",cinema1);
			fscanf(fpt,"%d",&hall);
			fscanf(fpt,"%s",starttime);
			fscanf(fpt,"%s",endtime);
			fscanf(fpt,"%d",&length);
			fscanf(fpt,"%d",&totalseat);
			fscanf(fpt,"%d",&remain);
			fscanf(fpt,"%lf",&price);
			fscanf(fpt,"%s",lang);
			fscanf(fpt,"%s",type);
			fscanf(fpt,"%s",coupon);
			fscanf(fpt,"%d",&line);
			fscanf(fpt,"%d",&column);
			Occupied1 = (int *)malloc((totalseat - remain) * sizeof(int));
			if (!Occupied1)
			{
				printf("Can't create the array!Fail to recover.\n");
				fclose(fpt);
			}
			else
			{
				for (k = 0;k < totalseat - remain;k++)
					fscanf(fpt,"%d",&Occupied1[k]);
				remain += order.SeatNum;//
				fclose(fpt);//关闭文件 
				if((fpt1 = fopen(path4,"w+")) == NULL)//寻找名字叫该场次的场次文件 (该目录下） 
				{
        			printf("Open the file failure...\n");
        			order.legal = 0; 
    			}
    				else
    				{
						fpt1 = fopen(path4,"w+");//把存在各个变量里的场次信息文件里的各项数据弄回该文件，方便修改票余数 
						fprintf(fpt1,"%s\n",SerialNum);
						fprintf(fpt1,"%s\n",moviename1);
			   			fprintf(fpt1,"%s\n",cinema1);
						fprintf(fpt1,"%d\n",hall);
						fprintf(fpt1,"%s\n",starttime);
						fprintf(fpt1,"%s\n",endtime);
						fprintf(fpt1,"%d\n",length);
						fprintf(fpt1,"%d\n",totalseat);
						fprintf(fpt1,"%d\n",remain);
						fprintf(fpt1,"%lf\n",price);
						fprintf(fpt1,"%s\n",lang);
						fprintf(fpt1,"%s\n",type);
						fprintf(fpt1,"%s\n",coupon);
						fprintf(fpt1,"%d\n",line);
						fprintf(fpt1,"%d\n",column);
						for (k = 0;k < totalseat - remain;k++)
						fprintf(fpt1,"%d\n",Occupied1[k]);
						fclose(fpt1);
					} 
			} 
		} 
}
int OrderSystem(char path[])
{
	int result=0,judge,legal1,i=0,i1=0,SRHF=0,TimeExceed=0,SesLegal=0;
	char Session[MAXSIZE],pathAB="\0";
	int JudgeOrder=0;
	strcpy(path,pathAB);
	printf("**********欢迎进入购票系统！**********\n");
	printf("        请输入您想购买的场次："); 
	scanf("%s",Session);
	SRHF = 0;
	TimeExceed = 0;
	time_t It;
	SesLegal = JudgeSes(Session,pathAB);
	if (SesLegal == 1)		//场次合法 
	{
		order = CreateOrder(basics);	
		Detail = ReadSession(Session,pathAB); //通过用户选择的场次返还更具体的信息     	   
		order = SelectSeat(order,Detail,pathAB);		   //用户开始选座 
		order = CompleteOrder(order,Detail,pathAB);	   //用户最后确认订单 传过来的订单一定是合法的 
		DealOrder(order,pathAB);
		if (order.legal == 1) 
		{
			printf("Do you want to delete your order ? If you want to delete, please print 1;if not, please print 0.");
			scanf("%d",&order.del);
			if (order.del == 0)//如果订单有效 
			{
				TimeExceed = TIME(order);
				if (TimeExceed == 0)//未超时 
				{
					Pay(order);
					printf("成功完成订单及支付!\n");
					JudgeOrder = 1;
					return JudgeOrder;
				}
				else
				{ 
					printf("订单支付超时！请\n");
					JudgeOrder = 0;
					return JudgeOrder;
				} 
			}
				else if (order.del == 1)
				{
					Recover(order);
					printf("成功删除订单！\n");
					JudgeOrder = 0;
					return JudgeOrder;
				}
		}
			else if (order.legal == 0)
			{
				printf("订票失败！将直接退回查询&购票系统！\n");
				JudgeOrder = 0;
				return JudgeOrder;
			}
	}
	else
	{ 
		printf("该场次不存在！将直接退回查询&购票系统！\n"); 
		JudgeOrder = 0;
		return JudgeOrder; 
	}
}
void SEARCH(char path[]) 
{
	char pathAA[MAXSIZE]="\0";
	strcpy(pathAA,path);
	char option='\0',EntOS='\0';
	int srhf=0,i=0;
	srhf = 0;
	for (i = 0;srhf != 1;i++)
	{
		printf("*********欢迎来到查询&购票系统!**********\n");
		printf("\t1.根据影片名搜索\n");
		printf("\t2.根据影院名搜索\n");
		printf("\t3.根据影院名+影片名搜索\n");
		printf("\t4.热门场次推荐\n");
		printf("************************************************\n");	
		printf("\t请选择序号:");
		EntOS = 0;
		scanf("%c",&option);
		if (option >= '1' && option <= '4')
		{
			srhf = 1;
			if (option == '1')
				MovSearch(pathAA);
				else if (option == '2')
					CinSearch(pathAA);
					else if (option == '3')
						MovAndCinSearch(pathAA);
						else if (option == '4')
							HotSession(pathAA);
			printf("请问您是否选择订票?\n");
			printf("如果选择订票，请输入1;否则，输入0.\n");
			printf("温馨提示：请勿输入其他字符.\n");
			printf("请输入您的选项：\n");
			scanf("%c",&EntOS);
			if (EntOS == '1')
			{
				srhf = OrderSystem();
				if (srhf == 0)
					printf("购票失败！将重新进入查询&购票系统。\n");
					else if (srhf == 1)
						printf("购票成功！将退出查询&购票系统。\n");
			} 
			else if (EntOS !='0' && EntOS != '1')
			{
				printf("非法输入!将强行退出程序！\n");
				exit(1);
			}
			else if (EntOS == '0')
				printf("未选择购票。将退出查询&购票系统。n"); 
		}
		else 
		{ 
			printf("非法输入!将强行退出程序！\n");
			exit(1); 
		} 
	}
}
#endif
